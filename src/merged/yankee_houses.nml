// Begin Header

grf {
	grfid: "TT12";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	version: 0;
	min_compatible_version: 0;
}

cargotable {
	PASS, MAIL, GOOD, FOOD, WSTE
}

disable_item(FEAT_HOUSES);

// End Header
// Begin Sprite Templates

template template_z64(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x+72,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x+144,	y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x+216,	y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

// Bus stops are TILE_CLASS_STATION, not TILE_CLASS_ROAD. If the building is not adjacent to a road (below) it may be adacent to a bus stop which it should face.
// Note: This will make buildings truly not adjacent to a road, but adjacent to a station (of any type) face the station.
switch (FEAT_HOUSES, SELF, switch_station_adjacency, 
		((nearby_tile_class(-1,0) == TILE_CLASS_STATION) * 1) + /*face NE*/
		((nearby_tile_class(0,-1) == TILE_CLASS_STATION) * 2) + /*face NW*/
		((nearby_tile_class(1,0) == TILE_CLASS_STATION) * 4) + /* face SW */
		((nearby_tile_class(0,1) == TILE_CLASS_STATION) * 8) /*face SE*/
		) {
			0..1: return 3; // 0 = no road adjacent; diagonal or otherwise
			2..3: return 2;
			4..7: return 1;
			8..16: return 0;
			0;
}

// Buildings face the road, using animation frames. Buildings adjacent to multiple roads to face the camera.
switch (FEAT_HOUSES, SELF, switch_road_adjacency, 
		((nearby_tile_class(0,1) == TILE_CLASS_ROAD) * 8) + /*face SE*/
		((nearby_tile_class(1,0) == TILE_CLASS_ROAD) * 4) + /* face SW */
		((nearby_tile_class(0,-1) == TILE_CLASS_ROAD) * 2) + /*face NW*/
		((nearby_tile_class(-1,0) == TILE_CLASS_ROAD) * 1) /*face NE*/
		) {
			1: return 3;
			2..3: return 2;
			4..7: return 1;
			8..15: return 0;
			switch_station_adjacency; // Bus stops are TILE_CLASS_STATION, not TILE_CLASS_ROAD. If the building is not adjacent to a road (below) it may be adacent to a bus stop which it should face.
}

// End Sprite Templates

// Begin R1 Fulton

spriteset (spr_r1_fulton, "src/gfx/r1_fulton_8bpp.png") {
	template_z64(0,0)
}

spriteset (spr_r1_fulton_snow, "src/gfx/r1_fulton_snow_8bpp.png") {
	template_z64(0,0)
}

spritelayout sprlay_r1_fulton_norm {
	ground {
		sprite: LOAD_TEMP(0);
	}
	building {
		sprite: spr_r1_fulton(LOAD_TEMP(1));
	}
}

spritelayout sprlay_r1_fulton_snow {
	ground {
		sprite: LOAD_TEMP(0);
	}
	building {
		sprite: spr_r1_fulton_snow(LOAD_TEMP(1));
	}
}

switch (FEAT_HOUSES, SELF, switch_r1_fulton_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_r1_fulton_snow; sprlay_r1_fulton_norm;}

item(FEAT_HOUSES, item_houses, 00, HOUSE_SIZE_1X1){
	property {
		substitute: 26;
		name: TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 13;
		accepted_cargos: [[PASS, 3],[MAIL, 1]];
		local_authority_impact: 75;
		removal_cost_multiplier: 71;
		probability: 4;
		years_available: [1929,0xFFFF];
		minimum_lifetime: 2;
		availability_mask: [ALL_TOWNZONES & ~bitmask(TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: switch_r1_fulton_sprites;
	}
}

// End R1 Fulton
